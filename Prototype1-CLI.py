# FILE:         Prototype1-CLI.py
# AUTHOUR:      Adam Robinson
# DATE:         23/10/2025
# DESCRIPTION:  First implementation of the capture the flag game, and it rules set out in Game_Rules.md
#               Allows two human players to play the game against each other using a Command Line Interface and graphs generated by networkx.

import random
import networkx as nx
import matplotlib.pyplot as plt
plt.ion()

class Flag:
    def __init__(self, team, base_node):
        self.team = team  # red or blue
        self.base_node = base_node
        self.position = base_node
        self.carried_by = None

    def reset(self):
        """Return flag to base"""
        self.position = self.base_node
        self.carried_by = None

    def pick_up(self, player):
        """Let player pick up flag"""
        self.carried_by = player

    def is_captured(self):
        """Check if flag has been captured"""
        if self.carried_by is None:
            return False
        else:
            return self.carried_by.position == self.carried_by.base_node
        
class Player:
    def __init__(self, team, start_node):
        self.team = team  # red or blue
        self.position = start_node
        self.base_node = start_node
        self.has_enemy_flag = False

    def move(self, target, graph):
        """Move player to adjacent node if valid"""
        if target in graph.neighbors(self.position):
            self.position = target
            return True
        else:
            print("Invalid move")
            return False
        
class GameState:
    def __init__(self, graph, red_player, blue_player, red_flag, blue_flag):
        self.graph = graph
        self.red = red_player
        self.blue = blue_player
        self.red_flag = red_flag
        self.blue_flag = blue_flag
        self.turn = "red"
        self.winner = None
        self.turn_count = 0

    def switch_turn(self):
        """Change the player at the end of a turn"""
        if self.turn == "red":
            self.turn = "blue"
        else:
            self.turn = "red"

    def check_movement(self):
        """Ensure the correct rules are applied based on player movements"""
        # Return carried flag to its base node if the player is caught
        if self.red.position == self.blue.position:
            if self.turn == "red":
                defender = self.blue                # Player carrying the flag
                returning_flag = self.red_flag      # Flag to be returned
            else:
                defender = self.red                 # Player carring the flag
                returning_flag = self.blue_flag     # Flag to be returned
            if returning_flag.carried_by == defender:   # Return flag if it is carried by 'defender'
                returning_flag.reset()

        # Pick up the flag from its base
        if self.red.position == self.blue_flag.position and self.blue_flag.carried_by is None:
            self.blue_flag.pick_up(self.red)
        if self.blue.position == self.red_flag.position and self.red_flag.carried_by is None:
            self.red_flag.pick_up(self.blue)

        # Update flag position to follow its carrier
        if self.red_flag.carried_by is not None:
            self.red_flag.position = self.red_flag.carried_by.position
        if self.blue_flag.carried_by is not None:
            self.blue_flag.position = self.blue_flag.carried_by.position


    def check_win(self):
        """Check if either player has captured their opponents flag"""
        if self.red_flag.is_captured():
            self.winner = "Blue"
        elif self.blue_flag.is_captured():
            self.winner = "Red"
        
class CaptureTheFlag:
    def __init__(self, graph, red_player, blue_player, red_flag, blue_flag):
        self.state = GameState(graph, red_player, blue_player, red_flag, blue_flag)
        self.pos = nx.spring_layout(graph, seed=42)

    def draw_graph(self):
        """Show the game state on the graph"""
        plt.clf() # Clear the existing graph
        nx.draw(self.state.graph, self.pos, with_labels=True) # Draw the updated graph
        # Colour the nodes to show the flag and player positions
        nx.draw_networkx_nodes(self.state.graph, self.pos, nodelist=[self.state.red_flag.position], edgecolors="red", linewidths=4)
        nx.draw_networkx_nodes(self.state.graph, self.pos, nodelist=[self.state.blue_flag.position], edgecolors="blue", linewidths=4)
        nx.draw_networkx_nodes(self.state.graph, self.pos, nodelist=[self.state.red.position], node_color="pink")
        nx.draw_networkx_nodes(self.state.graph, self.pos, nodelist=[self.state.blue.position], node_color="cyan")
        # Show the updated graph
        plt.show()

    def play(self):
        """Allow the players to move until there is a winner"""
        while self.state.winner is None:
            if self.state.turn == "red":
                player = self.state.red
            else:
                player = self.state.blue
            # Update game state details
            self.draw_graph()
            print("Current turn: ", self.state.turn)
            print("Available moves: ", list(self.state.graph.neighbors(player.position)))
            # Get a valid move from user
            valid = False
            while valid == False:
                move = int(input("Enter your move: "))
                valid = player.move(move, self.state.graph)
            
            # Process the move
            self.state.check_movement()
            self.state.check_win()
            self.state.switch_turn()
        
        print("WINNER: ", self.state.winner)    # Display the winner at the end of the game

def build_graph():
    """Create the playing graph and label its nodes"""
    graph = nx.grid_2d_graph(3, 3) 

    # Give each node a numbered label
    labels = {}
    nodes = list(graph.nodes())
    for i in range(len(nodes)):
        labels[nodes[i]] = i
    graph = nx.relabel_nodes(graph, labels)
    
    return graph


def main():
    """Run the game"""
    random.seed(42)
    graph = build_graph()

    # Initialise players
    red = Player("red", start_node=0)
    blue = Player("blue", start_node=8)

    # Initialise flags
    red_flag = Flag("red", base_node=0)
    blue_flag = Flag("blue", base_node=8)

    # Initialise and begin the game
    game = CaptureTheFlag(graph, red, blue, red_flag, blue_flag)
    game.play()

if __name__ == "__main__":
    main()